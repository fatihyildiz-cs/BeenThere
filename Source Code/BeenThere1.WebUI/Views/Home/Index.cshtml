@model MapModel

@{
    ViewBag.Title = "BeenThere";
}
@section Css{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.0/css/select2.min.css">
    <style>
        .mul-select {
            width: 100%;
        }
    </style>
}
@section Scripts{

    <script>$("#jumpbutton").click(function () {
            $('html, body').animate({
                scrollTop: $("#map").offset().top - $("#ftco-navbar").height()
            }, 1000);
        });</script>

    <script>$("#clearFilters").click(function () {
            DeleteAllMarkers();
            $("option:selected").prop("selected", false);
            filterMarkers();
            initMap();
        });</script>


    <script>


    function filterMarkers(e){

        var valdata = $("#filterMarkerForm").serialize();

        $.ajax({
            url: "/home/filtermarkers",
            type: "POST",
            dataType: 'json',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            data: valdata,
            success: function (data) {

                DeleteAllMarkers();
                markersToDisplay = JSON.parse(data['markerString']);
                initMap();
            }
        })
    };

    "use strict";

    var markersToDisplay = @Html.Raw(ViewBag.Markers);

    var foundMarkerCoordinates;

    let markers = [];

    var existingMarkersArray = [];

    let autocomplete;

    var initialMarkersArray = [];

        function DeleteAllMarkers() {
            for (var i = 0; i < existingMarkersArray.length; i++) {
                existingMarkersArray[i].setMap(null);
            }
            existingMarkersArray = [];
        };

    const componentForm = {
        street_number: "short_name",
        route: "long_name",
        locality: "long_name",
        administrative_area_level_1: "long_name",
        country: "long_name",
        postal_code: "short_name"
    };

    function updateViewBag() {
        ViewBag.Markers = null;
    }
    function initMap() {

        const map = new google.maps.Map(document.getElementById("map"), {
            center: {
                lat: 33.589886,
                lng: -7.603869
            },
            zoom: 3,
            @*gestureHandling: 'greedy'*@
        });

        var existingMarkers = markersToDisplay;

        var bounds = new google.maps.LatLngBounds();

        //center the map to user's location if the location access is approved on browser

        @*if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                map.setCenter(initialLocation);
                map.setZoom(4);
            });
        }*@

        const card = document.getElementById("pac-card");
        const input = document.getElementById("pac-input");
        const countrySelector = document.getElementById("countrySelector");
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);
        @*map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(filter);*@

        autocomplete = new google.maps.places.Autocomplete(input); // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.

        autocomplete.bindTo("bounds", map); // Set the data fields to return when the user selects a place.

        autocomplete.setFields([
            @*"address_components",
            "geometry",
            "icon",
            "name",
            "place_id"*@
        ]);




        const geocoder = new google.maps.Geocoder();

        const infowindow1 = new google.maps.InfoWindow();
        var infowindow1Content = document.getElementById("geolocation-infowindow");
        infowindow1.setContent(infowindow1Content);

        map.addListener('click', function (e) {

            if (e.placeId) {
                @*e.stop();*@
            }
            deleteMarkers();
            const coordinates = e.latLng.lat() + "," + e.latLng.lng();
            geocodeFillAddress(e.latLng);

            geocodeLatLng(geocoder, map, coordinates);
        });

        for (var i = 0; i < existingMarkers.length; i++) {

            AddInitialMarkers(existingMarkers[i])
        };

        map.fitBounds(bounds);

        //try the following code to see what it does https://stackoverflow.com/questions/15719951/auto-center-map-with-multiple-markers-in-google-maps-api-v3

        @*var listener = google.maps.event.addListener(map, "idle", function () {
            map.setZoom(3);
            google.maps.event.removeListener(listener);
        });*@

        function AddInitialMarkers(object) {

            var myLatlng = new google.maps.LatLng(object.Latitude, object.Longitude);

            var marker = new google.maps.Marker({

                position: myLatlng,
                map: map,
            });

            initialMarkersArray.push(marker);

            bounds.extend(marker.position);

            var categoryString = "";

            object.Categories.forEach(myFunction);

            function myFunction(item) {
                categoryString = categoryString + '<a class="btn btn-sm btn-dark" style="margin-bottom:5px" href="/social/categorysummary/' + item.CategoryUrl + '">' + item.CategoryName + '</a> ';
            }

            var contentString = '<div id="content" class="text-center">' +


                '<h5>' + object.Name + '</h5><hr>' +
                '<h6><a href="/social/locationsummary/' + object.LocationId + '">' +
                'Read </a>experiences about this place</h6><hr>' +
                '<h6><a href="/social/experiencecreate/' + object.LocationId + '">' +
                'Write </a>experiences about this place</h6><hr>' +
                '<h6>Categories of this place:</h6><br /> ' + categoryString
                '</div>';



            var infoWindow = new google.maps.InfoWindow({
                content: contentString,
                maxWidth: 400
            });



            marker.addListener('click', function () {
                infoWindow.open(map, marker);
                map.setZoom(15);
                map.setCenter(marker.getPosition());
            });

            existingMarkersArray.push(marker);




        };


        var markerCluster = new MarkerClusterer(map, existingMarkersArray, {
            averageCenter: true,
            imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
        });


        const infowindow = new google.maps.InfoWindow();
        const infowindowContent = document.getElementById("infowindow-content");
        infowindow.setContent(infowindowContent);
        const marker = new google.maps.Marker({
            map,
            anchorPoint: new google.maps.Point(0, -29),
            draggable: false
        });



        marker.addListener('dragend', (e) => {

            map.setCenter(marker.getPosition());
            geocodeFillAddress(e.latLng);
        });

        marker.addListener('click', (e) => {

            new google.maps.event.trigger(autocomplete, 'place_changed');
        });




        autocomplete.addListener("place_changed", () => {
            deleteMarkers();
            const place = autocomplete.getPlace();

            fillInAddress(place);
            infowindow.close();

            marker.setVisible(false);


            if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert(
                    "No details available for input: '" + place.name + "'"
                );
                return;
            } // If the place has a geometry, then present it on a map.

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17); // Why 17? Because it looks good.
            }

            marker.setPosition(place.geometry.location);

            foundMarkerCoordinates = place.geometry.location;

            marker.setVisible(true);
            let address = "";

            if (place.address_components) {
                address = [
                    (place.address_components[0] &&
                        place.address_components[0].short_name) ||
                    "",
                    (place.address_components[1] &&
                        place.address_components[1].short_name) ||
                    "",
                    (place.address_components[2] &&
                        place.address_components[2].short_name) ||
                    ""
                ].join(" ");
            }

            infowindowContent.children["place-icon"].src = place.icon;
            infowindowContent.children["place-name"].textContent = place.name;
            infowindowContent.children["place-address"].textContent = address;
            @*infowindowContent.children["place-country"].textContent = place.country;*@
            infowindow.open(map, marker);

            const request = {
                placeId: place.place_id,
                fields: ["name", "formatted_address", "place_id", "website", "international_phone_number","url"]
            };

            const service = new google.maps.places.PlacesService(map);
            service.getDetails(request, (place, status) => {
                if (status === google.maps.places.PlacesServiceStatus.OK) {

                    document.getElementById('website').value = "";
                    document.getElementById('website').disabled = false;
                    document.getElementById('website').value = place.website;

                    document.getElementById('phoneNumber').value = "";
                    document.getElementById('phoneNumber').disabled = false;
                    document.getElementById('phoneNumber').value = place.international_phone_number;

                    document.getElementById('url').value = "";
                    document.getElementById('url').disabled = false;
                    document.getElementById('url').value = place.url;


                }
            });





        });         

        function geocodeLatLng(geocoder, map, coordinates) {

            deleteMarkers();
            const latlngStr = coordinates.split(",", 2);
            const latlng = {
                lat: parseFloat(latlngStr[0]),
                lng: parseFloat(latlngStr[1])
            };


            geocoder.geocode(
                {
                    location: latlng
                },
                (results, status) => {

                    if (status === "OK" || status === "ZERO_RESULTS") {

                        @* map.setZoom(5);*@
                const clickMarker = new google.maps.Marker({
                            position: latlng,
                            map: map,
                    @* animation: google.maps.Animation.DROP,*@
                        draggable: true
                    });
            markers.push(clickMarker);
            clickMarker.addListener('click', () => {
                map.setZoom(10);
                map.setCenter(clickMarker.getPosition());
            });
            clickMarker.addListener('dragend', (e) => {
                const geocoder = new google.maps.Geocoder();
                const coordinates1 = e.latLng.lat() + "," + e.latLng.lng();
                const infowindow2 = new google.maps.InfoWindow();


                geocodeLatLng(geocoder, map, coordinates1);
                geocodeFillAddress(e.latLng);
            });

            map.panTo(latlng);                    

                if (results[0]) {
                infowindow1Content.children["div"].children["address"].textContent = results[0].formatted_address;

            }
            else {
                    infowindow1Content.children["div"].children["address"].textContent = "";
            }

            infowindow1.open(map, clickMarker);
        } else {

            if (status == "OVER_QUERY_LIMIT") {
                swal({
                    text: "Please wait a second before clicking again.",
                });
            }
            else {
                window.alert("Geocoder failed due to: " + status);
            }

        }
    }
    );
}
    }

    

    


    function setMapOnAll(map) {
        for (let i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    function clearMarkers() {
        setMapOnAll(null);
    }

    function showMarkers() {
        setMapOnAll(map);
    }

    function deleteMarkers() {
        clearMarkers();
        markers = [];
    }

    function geocodeFillAddress(latLng) {

        if (foundMarkerCoordinates && google.maps.geometry.spherical.computeDistanceBetween(foundMarkerCoordinates, latLng) > 1000) {
            clearInputs();
        }

        document.getElementById('newLocationLatitude').value = "";
        document.getElementById('newLocationLatitude').disabled = false;
        document.getElementById('newLocationLatitude').value = latLng.lat();

        document.getElementById('newLocationLongitude').value = "";
        document.getElementById('newLocationLongitude').disabled = false;
        document.getElementById('newLocationLongitude').value = latLng.lng();
    }


    function fillInAddress(place) {
        // Get the place details from the autocomplete object.

        document.getElementById('name').value = "";
        document.getElementById('name').disabled = false;
        document.getElementById('name').value = place.name;

        document.getElementById('latitude').value = "";
        document.getElementById('latitude').disabled = false;
        document.getElementById('latitude').value = place.geometry.location.lat();

        document.getElementById('longitude').value = "";
        document.getElementById('longitude').disabled = false;
        document.getElementById('longitude').value = place.geometry.location.lng();

        document.getElementById('placeId').value = "";
        document.getElementById('placeId').disabled = false;
        document.getElementById('placeId').value = place.place_id;


        for (const component in componentForm) {
            document.getElementById(component).value = "";
            document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.

        for (const component of place.address_components) {

            const addressType = component.types[0];
            if (componentForm[addressType]) {
                const val = component[componentForm[addressType]];
                document.getElementById(addressType.toString()).value = val;

                //when gettting the country name, also get the country code so that we can add it to visited
                //country list. That list's update function only accepts country codes as input.
                if (addressType == "country") {
                    document.getElementById("countryCode").value = component["short_name"];
                }
            }
        }
    }

    function clearInputs() {

        document.getElementById('placeId').value = null;
        document.getElementById('name').value = null;
        document.getElementById('website').value = null;
        document.getElementById('phoneNumber').value = null;
        document.getElementById('url').value = null;
        document.getElementById('postal_code').value = null;
        document.getElementById('street_number').value = null;
        document.getElementById('route').value = null;
        document.getElementById('locality').value = null;
        document.getElementById('country').value = null;
        document.getElementById('administrative_area_level_1').value = null;
        document.getElementById('countryCode').value = null;
    }

    function focusOnMarkers() {

        var bounds = new google.maps.LatLngBounds();
        var infowindow = new google.maps.InfoWindow();

        for (i = 0; i < locations.length; i++) {
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map
            });

            //extend the bounds to include each marker's position

            bounds.extend(marker.position);

            google.maps.event.addListener(marker, 'click', (function (marker, i) {
                return function () {
                    infowindow.setContent(locations[i][0]);
                    infowindow.open(map, marker);
                }
            })(marker, i));
        }

        //now fit the map to the newly inclusive bounds

        map.fitBounds(bounds);

        //(optional) restore the zoom level after the map is done scaling

        var listener = google.maps.event.addListener(map, "idle", function () {
            map.setZoom(3);
            google.maps.event.removeListener(listener);
        });
    }




    </script>

    <script>$(document).ready(function () {
            $(".mul-select").select2({
                placeholder: " Select categories",
                tags: true,
                tokenSeparators: ['/', ',', ';', " "]
            });
        })</script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.0/js/select2.min.js"></script>
}
<script defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCE1Y1CP375rP8PlxlKBoumKtsGkzk1KWE&callback=initMap&libraries=places,geometry&language=en"></script>
<script src="https://googlemaps.github.io/v3-utility-library/packages/markerclustererplus/dist/markerclustererplus.min.js"></script>

<style type="text/css">
    /* Always set the map height explicitly to define the size of the div
    * element that contains the map. */
    #map {
        height: 800px;
        width: 100%;
        overflow-anchor: none;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 90%;
        margin: 0;
        padding: 0;
        background-color: #d6e0f0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    #geolocation-infowindow {
        display: none;
        
    }

    #map #geolocation-infowindow {
        display: inline;
        
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

    .pac-item-query {
        color: #212529;
    }

    .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #212529;
        }

    #title {
        color: #fff;
        background-color: #212529;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }
</style>




<div class="hero-wrap js-fullheight" style="background-image: url('/img/images/bg_2.jpg');" data-stellar-background-ratio="0.5">
    <div class="overlay"></div>
    <div class="container">
        <div class="row no-gutters slider-text js-fullheight align-items-center justify-content-end" data-scrollax-parent="true">
            <div class="col-md-7 ftco-animate mt-5" data-scrollax=" properties: { translateY: '70%' }">
                <h1 class="mb-4" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">Be a Traveler.</h1>
                <h1 class="mb-4" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">Not a Tourist.</h1>
                <p class="mb-4" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">Travel to the any corner of the world, without going around in circles</p>
                <a id="jumpbutton" class="display-4 font-weight-bold" style="color:#ffb400;cursor: pointer;"><i class="fas fa-angle-double-down"></i> Browse Map <i class="fas fa-angle-double-down"></i> </a>

            </div>
        </div>
    </div>
</div>

<section class="ftco-section ftco-no-pb ftco-no-pt">
    <div class="container">

    </div>
</section>

<section class="ftco-section">

    <div class="row justify-content-center pb-5">
        <div class="col-md-12 heading-section text-center ftco-animate">
            <h2 class="mb-4">Best Place to Travel</h2>
            <p>Far far away, behind the word mountains, far from the countries Vokalia and Consonantia</p>
        </div>
    </div>

    <div class="pac-card" id="pac-card">
        <div>
            <div id="title">
                Search For A Place
            </div>
        </div>
        <div id="pac-container">
            <input class="form-control mt-3" id="pac-input" type="text" placeholder="Enter a location" />
        </div>
    </div>
    <div id="map"></div>
    <div id="infowindow-content">

        <img src="" width="16" height="16" id="place-icon" style="display:inline" />
        <h5 id="place-name" class="title" style="display:inline"></h5><br />
        <h6 id="place-address"></h6>
        <hr />

        @if (User.Identity.IsAuthenticated)
        {
            <div style="text-align:center">
                <button type="submit" form="countryForm" id="submitCountryForm" class="btn btn-primary">Been There!</button>
            </div>
        }
        else
        {
            <div style="text-align:center">
                <h6><a asp-controller="account" asp-action="login" asp-route-returnUrl="/home/index/#map" class="btn btn-primary mr-3">Sign In</a>to start sharing your experiences.</h6>
            </div>
        }
    </div>
    <div id="geolocation-infowindow">
        <div id="div" style="text-align:center">
            <h5 id="address"></h5>
            <hr>
            <h5>Looks like nobody discovered this place yet!</h5>

            @if (User.Identity.IsAuthenticated)
            {
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#newLocationModal">Been There!</button>
            }
            else
            {
                <h6><a asp-controller="account" asp-action="login" asp-route-returnUrl="/home/index/#map" class="btn btn-primary mr-3">Sign In</a>to start sharing your experiences.</h6>
            }
        </div>
    </div>


    <div class="container">
        <div class="row" id="filter">
            <div class="col-md-12">
                <div class="search-wrap-1 p-4">
                    <form id="filterMarkerForm" action="/home/index" method="post" class="search-property-1">
                        <div class="row">
                            <div id="clearFilters" class="btn btn-primary">Clear Filters</div>
                            <div class="col-lg align-items-end">
                                <div class="form-group">
                                    <label for="countryChoice">Choose a country:</label>

                                    <select id="countryChoice" name="countryChoice" onchange="filterMarkers()">

                                        <option value="@Model.ChosenCountryName" selected>@Model.ChosenCountryName</option>

                                        @foreach (var countryName in Model.Countries)
                                        {
                                            <option value="@countryName">@countryName</option>
                                        }

                                    </select>
                                </div>
                            </div>
                            <div class="col-lg align-items-end">
                                <div class="form-group">
                                    <select onchange="filterMarkers()" name="filterCategoryIds" id="filterCategoryIds" class="mul-select" multiple="true">
                                        @foreach (var category in Model.AllCategories.Where(c => c.Approved == true))
                                        {
                                            <!option value="@category.CategoryId" @(Model.ChosenCategoryArray.Any(i => i == category.CategoryId) ? "selected" : "")>
                                                @category.Name
                                            </!option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <form id="countryForm" asp-controller="social" asp-action="locationcreate" method="post">
            @await Html.PartialAsync("_AutocompleteFormAreas")
        </form>
    </div>

    <div class="modal fade" id="newLocationModal" tabindex="-1" role="dialog" aria-labelledby="newLocationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newLocationModalLabel">Register Location</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-header">
                    <h6 class="modal-title" id="newLocationModalLabel">Since you are the first one to discover this place, a little information is needed to guide other travelers!</h6>
                </div>
                <form id="countryForm" asp-controller="social" asp-action="locationcreate" method="post">
                    <input type="hidden" class="form-control" id="newLocationLatitude" name="latitude">
                    <input type="hidden" class="form-control" id="newLocationLongitude" name="longitude">

                    <div class="modal-body">
                        <div class="form-group">
                            <label for="recipient-name" class="col-form-label">Name:</label>
                            <input type="text" class="form-control" id="recipient-name" name="name" placeholder="Eiffel Tower, Danube River etc." required>
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="col-form-label">Country:</label>
                            <div class="form-field">
                                <div class="select-wrap">
                                    <select name="countryCode" id="" class="form-control" required>
                                        <option selected disabled value="">
                                            Select
                                        </option>
                                        @await Html.PartialAsync("_CountrySelectList");
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col form-group">
                                <label for="recipient-name" class="col-form-label">City:</label>
                                <input type="text" class="form-control" id="newLocationLatitude" name="city">
                            </div>
                            <div class="col form-group">
                                <label for="recipient-name" class="col-form-label">State:</label>
                                <input type="text" class="form-control" id="newLocationLongitude" name="state">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col form-group">
                                <label for="recipient-name" class="col-form-label">Website:</label>
                                <input type="text" class="form-control" id="newLocationLatitude" name="website">
                            </div>
                            <div class="col form-group">
                                <label for="recipient-name" class="col-form-label">Phone Number:</label>
                                <input type="text" class="form-control" id="newLocationLongitude" name="phoneNumber">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Been There!</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

</section>


<section class="ftco-subscribe" style="background-image: url('/img/images/bg_1.jpg');">
    <div class="overlay">
        <div class="container">
            <div class="row d-flex justify-content-center">
                <div class="col-md-10 text-wrap text-center heading-section ftco-animate">
                    <h2>Subcribe to our Newsletter</h2>
                    <div class="row d-flex justify-content-center mt-4 mb-4">
                        <div class="col-md-10">
                            <form action="#" class="subscribe-form">
                                <div class="form-group d-flex">
                                    <input type="text" class="form-control" placeholder="Enter email address">
                                    <input type="submit" value="Subscribe" class="submit px-3">
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
